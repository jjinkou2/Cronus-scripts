/*
  ____   ___    _    __  _______
 |  _ \ / _ \  / \   \ \/ /___ /
 | | | | | | |/ _ \   \  /  |_ \
 | |_| | |_| / ___ \  /  \ ___) |
 |____/ \___/_/   \_\/_/\_\____/
   ____      _        __  ______
  / ___|_ __(_)_ __   \ \/ /  _ \
 | |  _| '__| | '_ \   \  /| |_) |
 | |_| | |  | | | | |  /  \|  __/
  \____|_|  |_|_| |_| /_/\_\_|                                             V0.1
____________________________________________________________________________

Licence : MIT
Author  : jinkou

Total byte size: 1079 bytes (26.34%)
Total variables used: 13 of which 3 are dedicated to combos (11.61%)


  /*-------------------------*/
 /*  How to start           */
/*--------------------------/-----------------------------------------------

    1) Before starting the script, just change the character
       in the config paragraph below (§CAR_Config)

    2) Start the script with Triangle. You can Pause the script too. You
       must start the script when the game is at the beginning.

    3) If the script broke, press Square to stop the script.
       Then, manually avance the game to the beginning of a day
       and press R2.
       Caution : You will have to stop manually the script at day 14.
       ---------

/*---------------------------------------------------------------------------

  /*------------------------*/
 /*  Commands of the script */
/*--------------------------/-----------------------------------------------

    Color Led:
    ----------
        - BLUE             : Script is Stopped
        - BLINKING RED     : Script is on Pause
        - GREEN            : Script is Playing

    Commands:
    ---------
    - Press Triangle to start the script at the begining of the
      game (intro screen).
    - Re-Press Triangle to Pause / play the script anywhere
      (not fully tested).

    - Press Square to Stop the script.

    - If the script is stopped, pressing R2
        will start it at the beginning of the day.
        You will have to reach the beginning of the day before pressing R2.

/*-------------------------------------------------------------------------*/


 /*-----------------------*/
 /*      Characters           */
/*------------------------*/
define Kasumi                        = 0;
define Momiji                        = 2;
define Hitomi                        = 4;
define Helena                        = 6;
define MarieRose                     = 8;
define Honoka                        = 12;
define NyoTengu                      = 14;
define Kokoro                        = 16;
define Ayane                         = 18;


   /*------------------------*/
  /*      Configuration         */
 /*       (§CAR_Config)        */
/*-------------------------*/

define CharacterToPlay                = Momiji;


  /*-----------------------*/
 /*      Definition        */
/*------------------------*/


define Nb_Event                     = 3; // Morning, Afternoon, Evening
define Nb_Days                      = 10;


// State Definition
// ----------------


define S_Play_Combo                 = 1;

define S_Start_Intro                = 10;
define S_Select_Char                = 11;
define S_Start_Vacation             = 12;
define S_End_Vacation               = 13;

define S_Start_Day                  = 20;
define S_End_Day                    = 21;
define S_Start_Stage                = 22;
define S_Start_RockPlay             = 23;
define S_Hotel                      = 24;
define S_Mission                    = 25;
define S_Go_Bed                     = 26;

define S_Start_Game                 = 80;
define S_End_Game                   = 81;

define S_IDLE                       = 100;

// indices used for the data structure
// -----------------------------------

define cb_DataStart                = 0;

define cb_intro                    = 1;
define cb_left_char                = 5;
define cb_right_char               = 10;
define cb_start_vacation           = 15;
define cb_greeting                 = 20;
define cb_select_rock_stage        = 25;
define cb_abort_rock_play          = 30;
define cb_hotel                    = 35;
define cb_mission                  = 40;
define cb_go_bed                   = 45;
define cb_end_vacation             = 50;

// End Flags. 254 and 255 should never be used in the
// data segment for other purposes.
//-----------------------------------------------------
define EOC                          = 254; // End of combo
define EOD                          = 255; // End of Data Segment
//-----------------------------------------------------


// LED Colors
// ----------------

define GREEN                        = 1;
define BLUE                         = 2;
define RED_BLINK                    = 3;

  /*-----------------------*/
 /*      Variables         */
/*------------------------*/

// State variables
// ---------------
int State                            = S_IDLE;
int Next_State                       = S_IDLE;
int Play                             = FALSE;

// Days and loop vacation
//-----------------------
int NumDay = 1;
int loop_event = Nb_Event;   // Morning , Afternoon, Evening


// Debug
//------
int debug                            = FALSE;
int five_sec                         = 5000;


// combo
// -----

int idx_step;      // to circulate thru the data structure
int i,v;


  /*----------------------------*/
 /*      Data Structure         */
/*----------------------------*/

// EOC represents the end of an event

//  Idx, Button,       Wait(x50ms),     Event
//---------------------------------------------------------------
//      Introduction
data(
    cb_intro,
        PS4_CIRCLE,      30,         //  Intro screen
        PS4_OPTIONS,     10,         //  skip intro video
        PS4_OPTIONS,     80,         //
    EOC,

//      ...
//      Select Character
//            Left Side of Marie Rose
    cb_left_char,
        PS4_LEFT,        5,         //  Kasumi
        PS4_LEFT,        5,         //  Momiji
        PS4_LEFT,        5,         //  Hitomi
        PS4_LEFT,        5,         //  Helena
        PS4_CIRCLE,      100,       //  Confirm choice
    EOC,

//            Right Side of Marie Rose
    cb_right_char,
        PS4_RIGHT,       5,         //  Honoka
        PS4_RIGHT,       5,         //  NyoTengu
        PS4_RIGHT,       5,         //  Kokoro
        PS4_RIGHT,       5,         //  Ayane
        PS4_CIRCLE,      100,       //  Confirm choice
    EOC,

//      Start Vacation
    cb_start_vacation,
        PS4_OPTIONS,     10,         //  skip character intro
        PS4_OPTIONS,     80,         //
        PS4_LEFT,        10,         //  don't take a partner
        PS4_CIRCLE,      100,         //
        PS4_LEFT,        10,         //  Go to Rock Stage
        PS4_LEFT,        10,         //  to do => ajust nb of left
    EOC,
//      ...

//       One Day event
    cb_greeting,
        PS4_CIRCLE,      30,         //  greetings
    EOC,

    cb_select_rock_stage,
        PS4_LEFT,        10,         //  Go to Rock Stage
        PS4_LEFT,        10,         //
        PS4_LEFT,        10,         //
    EOC,

    cb_abort_rock_play,
        PS4_CIRCLE,      15,         //  Select Rock Stage
        PS4_DOWN,        10,         //
        PS4_CIRCLE,      80,         //  Select Rock Game

        PS4_OPTIONS,     10,         //  Abort Mission
        PS4_UP,          5,          //
        PS4_CIRCLE,      10,         //
        PS4_LEFT,        5,          //
        PS4_CIRCLE,      80,         //  Mission Aborted
    EOC,

    cb_hotel,
        PS4_CIRCLE,      60,         // End Of Day
        PS4_CIRCLE,      100,        //
        PS4_CIRCLE,      100,        // End Of Dialogue
        PS4_CIRCLE,      100,        // Start of Zack Gift
        PS4_CIRCLE,      50 ,        //
        PS4_SQUARE,      70,         // Open girl's
        PS4_LEFT,        5,         //
        PS4_LEFT,        5,         //
        PS4_LEFT,        5,         //
        PS4_CIRCLE,      10,         // select gift
        PS4_LEFT,        10,         //
        PS4_CIRCLE,      10,         //
        PS4_LEFT,        10,         //
        PS4_CIRCLE,      10,         // throw away gift
        PS4_CROSS,       50,        // exit girl's closet
    EOC,

    // if nb day < 14  else go to end vacation
    cb_mission,
        PS4_TOUCH,       10,         // quit mission
        PS4_UP,          10,         //
        PS4_UP,          30,         //
        PS4_CIRCLE,      50,         //
        PS4_LEFT,        10,         //
        PS4_CIRCLE,      10,         //
        PS4_TOUCH,       10,         // quit mission
    EOC,

    cb_go_bed,
        PS4_DOWN,        10,         // Start go to bed
        PS4_DOWN,        10,         //
        PS4_CIRCLE,      150,         //
        PS4_CIRCLE,      100,        // go to new morning
    EOC,


//       End Vacation
	cb_end_vacation,
        PS4_LEFT,        5,          //
        PS4_CIRCLE,      150,         //
        PS4_CIRCLE,      150,         //
    EOC,

// End of Data
    EOD
);                           // end of combo2


  /*----------------------------*/
 /*      Main and Init          */
/*----------------------------*/

init {

//    SwitchLED(BLUE);
    State = S_Start_Game;
    Play  = TRUE;
}

main {
    set_val(TRACE_3,State);  // Look at the state definition to know where the automata is stuck

    //Press Triangle to pause/play the script.
    if(event_press(PS4_TRIANGLE)) {
        Play = !Play;
        // LED
        if (Play)     {
//            SwitchLED(GREEN);
            if (State == S_Start_Game) State = S_Start_Intro;
        }
//        else    SwitchLED(RED_BLINK);
    }

    // Press Square to Stop the script
    if(event_press(PS4_SQUARE)) {
        State   = S_IDLE;
        Play    = FALSE;
        if (combo_running(cb_Send_Input)) combo_stop (cb_Send_Input);
//        SwitchLED(BLUE);
    }

    if (debug) {
//        SwitchLED(GREEN);
        debug = FALSE;
        Play  = TRUE;
        State = S_Start_Intro;
    }

    // If the script is stopped,
    if (State == S_IDLE) {
        // pressing R2
        // will restart it at the beginning of the day
        if (event_press(PS4_R2)) {
            Play  = TRUE;
            State = S_Start_Day;
//            SwitchLED(GREEN);
        }

        // Press L2
        // for debug test . Use it if you want to test a specific combo
        else if (event_press(PS4_L2)) DebugCombo (cb_end_vacation, 0);
    }

   // Main Loop of the State automata
   // -------------------------------
    if (Play) {
        if (State == S_Start_Intro)     run_State(cb_intro,0, S_Select_Char);
        if (State == S_Select_Char)     run_State(cb_left_char, CharacterToPlay, S_Start_Vacation);
        if (State == S_Start_Vacation)  run_State(cb_start_vacation,0, S_Start_Day);
        if (State == S_Start_Day)       run_State(cb_greeting,0, S_Start_Stage);
        if (State == S_Start_Stage)     run_State(cb_select_rock_stage, 0, S_Start_RockPlay);
        if (State == S_Start_RockPlay)
        {
            loop_event = loop_event - 1;
            if (!loop_event) {loop_event=Nb_Event; run_State(cb_abort_rock_play, 0, S_Hotel);}
            else                        run_State(cb_abort_rock_play, 0, S_Start_RockPlay);
        }
        if (State == S_Hotel)           run_State(cb_hotel, 0, S_Mission);
        if (State == S_Mission)         run_State(cb_mission, 0, S_Go_Bed);
        if (State == S_Go_Bed)          run_State(cb_go_bed, 0, S_End_Day);

        if (State==S_End_Day)
        {
            NumDay = NumDay + 1;
            if (NumDay > Nb_Days) {
                State   = S_End_Vacation;
                NumDay  = 1;
            }
            else {
                set_val(TRACE_4,NumDay);
                State   = S_Start_Day;
            }
        }

        if (State==S_End_Vacation)  State = S_IDLE;

        if (State == S_Play_Combo)
        { // combo playing
            // Execute the combo step-by-step
            if(!combo_running(cb_Send_Input)){
			    set_val(TRACE_1,idx_step); 

				if (dbyte(idx_step) != EOC)
                {
                    combo_restart(cb_Send_Input);

                }
                else State = Next_State;
            }
        }
    } // end of State automata

}

/*-----------------------*/
/*      Combos           */
/*-----------------------*/


combo cb_Send_Input{
    set_val(dbyte(idx_step),100);
    wait(100);

    set_val(dbyte(idx_step),0);
    wait(dbyte(idx_step + 1) * 50);

	idx_step = idx_step + 2;
}


/*-----------------------*/
/*      Functions         */
/*------------------------*/
/*
function SwitchLED(Color){
    // Find the correct color
    if (Color==GREEN) {
        set_led(LED_1, 0);
        set_led(LED_2, 0);
        set_led(LED_3, 1);
    }
    else if (Color==BLUE){
        set_led(LED_1, 1);
        set_led(LED_2, 0);
        set_led(LED_3, 0);
    }
    else if (Color==RED_BLINK){
        set_led(LED_1, 0);
        set_led(LED_2, 2);
        set_led(LED_3, 0);
    }
}
*/
// Returns the starting index of a combo

function get_combo_index(combo_id) {
    i = 0;
    while(TRUE) {//-----------------------
        v = dbyte(i);
        if(v == combo_id) {
			return(i + 1);
        } else {//====================
            while(v != EOC && v != EOD) {//#
                i = i + 1;
                v = dbyte(i);
            }//#
            if(v == EOD) break;
            else i = i + 1;
        }//=============================
    }//-----------------------------------
    return(-1);
}

function run_State(combo_to_run,offset,next) {
    idx_step    = get_combo_index(combo_to_run) + offset;
	State       = S_Play_Combo;
    Next_State  = next;
}


function DebugCombo(combo_to_run,offset){
    Play = TRUE;
    run_State (combo_to_run,offset,S_IDLE);
}
