/*
  ____   ___    _    __  _______
 |  _ \ / _ \  / \   \ \/ /___ /
 | | | | | | |/ _ \   \  /  |_ \
 | |_| | |_| / ___ \  /  \ ___) |
 |____/ \___/_/   \_\/_/\_\____/
   ____      _        __  ______
  / ___|_ __(_)_ __   \ \/ /  _ \
 | |  _| '__| | '_ \   \  /| |_) |
 | |_| | |  | | | | |  /  \|  __/
  \____|_|  |_|_| |_| /_/\_\_|                                        V0.4.1
____________________________________________________________________________

Licence : MIT
Author  : jinkou

Total byte size: 2146 bytes (52.39%)



  /*-------------------------*/
 /*  Quick start            */
/*--------------------------/----------------------------------------------

    1) Before starting the script, just change the character/swimsuit/Ticket
       in the config paragraph below (§Config)

    2) Important : Make sure the inventory gifts of your selected character is empty.

    3) Start the script :
        a) with Triangle if you are at the beginning of the game.
           (Screen "Press a button")
           You can Pause/Play the script too with triangle.

        b) with R2 if you are at the beginning of the day.

    4) Stop the script with R1.
       If the script broke, manually move the game to the beginning of the next day
       and press R2 to restart it.

       Note: You may have to resynchronise the day number by pressing several L1
       (look at TRACE_4 which displays the day number)

    Color Led:
    ----------
        - BLUE              : Script is Stopped
                              Only L1/Triangle/R2 are possible

        - RED               : Script is Paused
                              Only Triangle is possible.
                              Note: Don't play an event. You can do anything but
                              go back exactly where you left the script.

        - GREEN             : Script is Playing
                              R1 to stop and Triangle to pause.

    Troubleshooting:
    ---------
    - TRACE_3 displays the state where the script is.
      Look at §State_Definition for the matching state

    - TRACE_4 displays the day number. If the script is stuck or if something
      goes wrong, stop the script, manually move the game to the next day
      then adjust the day number inside TRACE_4 by pressing L1.

    - If you want to test a specific set of Data, use the function DebugCombo
      and press L2.

    - Press R3 to test a whole State

    - TRACE_1 displays the index of the step inside §DataSet (PS4_CIRCLE, 20)

/*-------------------------------------------------------------------------*/

  /*-----------------------*/
 /*      backlog          */
/*------------------------/-------------------------------------------------
v0.4.2  Bug fix: End of the vacation loop will be in LED Blue now. (was staying
				 green)
		Time ajustment at beginning, and at clearing notifications. script 
		should be more stable. 

v0.4.1  You can choose a different wrapping paper for each vacations. So you 
        can farm a single swimsuit for all girls. 

v0.4    New Feature:
            Paper Wrapping: you can select paper wrapping color. see §config
        Fixes:
        fine tuning time inside intro menu and character selection, 5xFaster
        bug fix for right side characters (from Honoka to Ayane)
        time added at the begining of the day (to avoid pool)

v0.3.1  fine tuning time inside menu, 5xFaster
        Correct the pause state to restart where we were before the pause
        Add trace_1 to trace the step (see §quickstart Troubleshooting)
        other bug fixes.
v0.3    You can buy swimsuits/ticket
v0.1    First version

---------------------------------------------------------------------------*/



  /*-----------------------*/
 /*      Characters       */
/*-----------------------*/
define Kasumi                      = 0;
define Momiji                      = 2;
define Hitomi                      = 4;
define Helena                      = 6;
define MarieRose                   = 8;
define Ayane                       = 12;
define Kokoro                      = 14;
define NyoTengu                    = 16;
define Honoka                      = 18;

// Paper wrapping 
define paper_Silver                = 0;
define paper_Kasumi                = 1;
define paper_Honoka                = 2;
define paper_MarieRose             = 3;
define paper_Ayane                 = 4;
define paper_NyoTengu              = 5;
define paper_Kokoro                = 6;
define paper_Hitomi                = 7;
define paper_Momiji                = 8;
define paper_Helena                = 9;
define paper_Premium               = 10;

  /*-------------------------*/
 /*      Items to collect   */
/*-------------------------*/
define Swimsuit                   = 0;
define Ticket                     = 1;
define All                        = 255;


  /*------------------------------------*/
 /*  Configuration      (§Config)       */
/*-------------------------------------/-----------------------------*/

// number of Vacation to loop
define Nb_Vacations               = 9;


// Select a Character to Farm,
// Possible Values [Hitomi, Helena, ..., All]
// if you put All, it will farm a new character each vacation.
define CharacterToPlay            = Honoka;

// Select a Wrapping paper,
// Possible Values [paper_Silver, paper_Hitomi, ..., paper_Premium, All]
// If All is selected it will change paper each vacations
// if you want  to farm a swimsuit/ticket for all girls, select 
// All for WrappingPaper and select only one Swimsuit below
define WrappingPaper              = All;


// Select between [Ticket or Swimsuit] to buy every 2 / 3 holidays
define Item_To_Buy                = Swimsuit;


// if you selected Swimsuit then modify the Swimsuit_X below.
// You can put different values to specify which one you want
//
// If Nb_Swimsuits = All, Swimsuit_X are not used

define Nb_Swimsuits                = 3; // Change the number of swimsuits to farm

int Index_Swimsuit;                     // dont' touch this one.
int Swimsuit_1                     = 6; // select the index of the first swimsuit to buy
int Swimsuit_2                     = 7; // for the 2nd 
int Swimsuit_3                     = 38; // Change it to the same value above if you farm only one

// uncomment below or add  as much Swimsuit_x as you like
// but don't forget to change the Nb_Swimsuits above
//int Swimsuit_4                    = 8;



// if Ticket is selected , select one from theses values (1,2,3,4,All)
define Ticket_Numero               = All;   //  select which one to buy

/*-------------  End of configuration ---------------------------------------------*/




  /*-----------------------*/
 /*      Definition       */
/*-----------------------*/

define Nb_Events                    = 3; // Morning, Afternoon, Evening
define Nb_Days                      = 14;
define Nb_Notifs                    = 20;


  /*---------------------------------------*/
 /* States           (§State_Definition)   */
/*---------------------------------------*/

define S_Play_Combo                 = 1;

define S_Start_Intro                = 10;
define S_Select_Char                = 11;
define S_Start_Vacation             = 12;
define S_End_Vacation               = 13;
define S_Return_Title               = 14;

define S_Start_Day                  = 20;
define S_End_Day                    = 21;
define S_Start_Stage                = 22;
define S_Start_RockPlay             = 23;
define S_Hotel                      = 24;
define S_Throw_Gift                 = 25;
define S_Go_Bed                     = 26;
define S_Owner_Shop                 = 27;
define S_Select_Swimsuit            = 28;
define S_Buy_Swimsuit               = 29;

define S_Paper                      = 30;
define S_Select_Ticket              = 31;
define S_Ticket_Tab                 = 32;
define S_Buy_Ticket                 = 33;
define S_Select_Paper               = 34;
define S_Wrap                       = 35;

define S_Clear_Event                = 50;
define S_Clear_Vacation             = 51;

define S_Start_Game                 = 80;
define S_End_Game                   = 81;

define S_IDLE                       = 100;

// indices used for the data structure
// -----------------------------------

define cb_intro                    = 1;
define cb_left_char                = 5;
define cb_right_char               = 10;
define cb_start_vacation           = 15;
define cb_greeting                 = 20;
define cb_select_rock_stage        = 25;
define cb_abort_rock_play          = 30;
define cb_hotel                    = 35;
define cb_throw_gift               = 40;
define cb_owner_shop               = 42;
define cb_buy_swimsuit             = 44;
define cb_paper                    = 45;
define cb_select_ticket_tab        = 46;
define cb_go_bed                   = 47;
define cb_end_vacation             = 50;
define cb_return_title             = 55;

// End Flags. 254 and 255 should never be used in the
// data segment for other purposes.
//-----------------------------------------------------
define EOC                          = 254; // End of combo
define EOD                          = 255; // End of Data Segment
//-----------------------------------------------------


// LED Colors
// ----------------

define GREEN                        = 1;
define BLUE                         = 2;
define RED_BLINK                    = 3;

//-----------------------------------------------------

  /*-----------------------*/
 /*      Variables         */
/*------------------------*/

// State variables
// ---------------
int State                           = S_IDLE;
int Next_State                      = S_Start_Game;
int Play                            = FALSE;

//
// Items Swimsuit and characters
//------------------------------
int next_swimsuit                   = 1;
int Selected_Ticket                 = Ticket_Numero;
int Selected_Char                   = CharacterToPlay;

// Days and loop vacation
//-----------------------
int NumDay                          = 1;
int loop_event                      = Nb_Events; // Morning , Afternoon, Evening
int loop_vacation                   = 1;
int loop_notif                      = 1;
int loop_button                     = 1;
int wait_time;                                  // time used between repeating button

// combo
// -----

int idx_step;      // to circulate thru the data structure
int i,v;
int PressButton;
int State_itemToBuy[2]; // Will give the State according to itemlist (see Init)

//-----------------------------------------------------

  /*--------------------------------------*/
 /*      Data Structure    (§DataSet)    */
/*--------------------------------------*/

// EOC represents the end of an event
// 255, or 254 a value reserved, don't use them

//  Idx, Button,       Wait(x50ms),     Event
//---------------------------------------------------------------
//      Introduction
data(
    cb_intro,
        PS4_CIRCLE,      50,         //  Travel to zack island
        PS4_CIRCLE,      100,        //
        PS4_OPTIONS,     10,         //  skip intro video
        PS4_OPTIONS,     100,        //
    EOC,

//      ...
//      Select Character
//            Left Side of Marie Rose
    cb_left_char,
        PS4_LEFT,        1,         //  Kasumi
        PS4_LEFT,        1,         //  Momiji
        PS4_LEFT,        1,         //  Hitomi
        PS4_LEFT,        1,         //  Helena
        PS4_CIRCLE,      150,       //  Confirm choice
    EOC,

//            Right Side of Marie Rose
    cb_right_char,
        PS4_RIGHT,       1,         //  Ayane
        PS4_RIGHT,       1,         //  Kokoro
        PS4_RIGHT,       1,         //  NyoTengu
        PS4_RIGHT,       1,         //  Honoka
        PS4_CIRCLE,      150,       //  Confirm choice
    EOC,

//      Start Vacation
    cb_start_vacation,
        PS4_OPTIONS,     20,         //  skip character intro
        PS4_OPTIONS,     240,         //  skip character intro
        PS4_OPTIONS,     50,         //  wait longer
        PS4_LEFT,        5,         //  don't take a partner
        PS4_CIRCLE,      240,         //
        PS4_RIGHT,       5,         //  Go to Rock Stage
    EOC,

//       One Day event
    cb_greeting,
        PS4_CIRCLE,      30,         //  greetings
    EOC,

    cb_select_rock_stage,
        PS4_LEFT,        1,         //  Go to Rock Stage
        PS4_LEFT,        1,         //
        PS4_LEFT,        1,         //
    EOC,

    cb_abort_rock_play,
        PS4_CIRCLE,      15,         //  Select Rock Stage
        PS4_DOWN,        1,         //
        PS4_CIRCLE,      80,         //  Select Rock Game

        PS4_OPTIONS,     1,         //  Abort Mission
        PS4_UP,          1,         //
        PS4_CIRCLE,      1,         //
        PS4_LEFT,        1,         //
        PS4_CIRCLE,      90,        //  Mission Aborted
        PS4_SQUARE,      100,        // clear optional notification
        PS4_SQUARE,      80,        // it will eventually enter inventory
        PS4_CROSS,       100,        // exit inventory
    EOC,

    cb_hotel,
        PS4_CIRCLE,      60,         // End Of Day
        PS4_CIRCLE,      100,        // End Of Dialogue
        PS4_CIRCLE,      100,        // Start of Zack Gift
    EOC,

    cb_throw_gift,
        PS4_SQUARE,      70,         // Open girl's closet
        PS4_LEFT,        5,         //
        PS4_LEFT,        2,         //
        PS4_LEFT,        2,         //
        PS4_CIRCLE,      10,         // select gift
        PS4_LEFT,        2,         //
        PS4_CIRCLE,      5,         //
        PS4_LEFT,        2,         //
        PS4_CIRCLE,      5,         // throw gift away
        PS4_CROSS,       50,        // exit girl's closet
    EOC,

    // Buy swimsuit / Ticket
    cb_owner_shop,
        PS4_CIRCLE,      60,         // End Of Day
        PS4_CIRCLE,      100,        // End Of Dialogue
        PS4_CIRCLE,      100,        // spam circle for notif
        PS4_TRIANGLE,    70,         // Enter Owner shop
    EOC,
    cb_buy_swimsuit,
        PS4_CIRCLE,      10,         // buy
    EOC,
    cb_paper,
        PS4_CIRCLE,      10,         // Paper select silver
        PS4_CIRCLE,      10,         // 
        PS4_CIRCLE,      10,            // yes / no ?
        PS4_SQUARE,      10,        // easy clear notif
        PS4_SQUARE,      10,        // not enough ? or ok
        PS4_CROSS,       10,            // cancel
        PS4_CROSS,       15,        // exit
        PS4_CROSS,       50,        // exit
        PS4_TOUCH,       50,        // exit Owner mode
    EOC,

    cb_select_ticket_tab,
        PS4_RIGHT,       10,
        PS4_RIGHT,       10,
        PS4_UP,          10,
        PS4_UP,          10,
    EOC,

    // Bed Time
    cb_go_bed,
        PS4_DOWN,        1,         // Start go to bed
        PS4_DOWN,        1,         //
        PS4_CIRCLE,      100,         //
        PS4_CIRCLE,      200,        // go to new morning
    EOC,


//       End Vacation
    cb_end_vacation,
        PS4_CIRCLE,      50,         //
        PS4_OPTIONS,     20,         //
        PS4_OPTIONS,     100,         //
        PS4_CIRCLE,      50,         //
    EOC,

    cb_return_title,
        PS4_CIRCLE,      150,         // return to title
    EOC,

// End of Data
    EOD
);                           // end of combo2


//-----------------------------------------------------

  /*----------------------------*/
 /*      Main and Init         */
/*----------------------------*/

init {
    SwitchLED(BLUE);
    State_itemToBuy[Swimsuit]   = S_Select_Swimsuit;
    State_itemToBuy[Ticket]     = S_Ticket_Tab;

    if (Ticket_Numero   == All) Selected_Ticket = 0;
    if (CharacterToPlay == All) Selected_Char   = 0;
    set_val(TRACE_4,NumDay);  // Trace 4 will display the # day
}

main {

    // Set script commands
   //---------------------


    //Press Triangle to pause/play the script.
    if(event_press(PS4_TRIANGLE)) {
        Play = !Play;
        if (Play) {
            SwitchLED(GREEN);
            State = Next_State;  //Start or restart where we were.
        }
        else {
          Next_State = State;  // Save state
          SwitchLED(RED_BLINK);
        }
    }

    // Press R1 to Stop the script
    if(event_press(PS4_R1)) {
        State       = S_IDLE;
        Next_State  = S_Start_Game;  // restart game
        Play        = FALSE;
        if (combo_running(cb_Send_Input)) combo_stop (cb_Send_Input);
        SwitchLED(BLUE);
    }

    // If the script is stopped,
    if (State == S_IDLE) {
        set_val(TRACE_3,State);  // Look at the state definition to know where the automata is stuck
        // pressing R2
        // will restart it at the beginning of the day
        if (event_press(PS4_R2)) {
            Play  = TRUE;
            State = S_Start_Day;
            SwitchLED(GREEN);
        }

        // Press L2
        // for debug test . Use it if you want to test a specific combo
        if (event_press(PS4_L2)) DebugCombo (cb_end_vacation, 0); // test a combe

        // R3 to test a whole State
        if (event_press(PS4_R3))  {Play  = TRUE;State = S_Start_RockPlay;} // test a whole state

        // L1 to adjust the numday (look at TRACE_4)
        if (event_press(PS4_L1))  {
            NumDay = NumDay  % 15 + 1 ;// adjust the numDay if script is stopped
            set_val(TRACE_4,NumDay);  // Trace 4 will display the # day
        }
    /*  if (event_press(PS4_UP))  {
            loop_vacation = loop_vacation  % Nb_Vacations + 1 ;
            set_val(TRACE_2,loop_vacation);  
        }*/
    }

    // Main Loop of the State automata
    // -------------------------------
    if (Play) {

        // intro States
        if (State == S_Start_Game)      State = StartGame();
        if (State == S_Start_Intro)     run_State(cb_intro,0, S_Select_Char);
        if (State == S_Select_Char)     run_State(cb_left_char, Selected_Char, S_Start_Vacation);
        if (State == S_Start_Vacation)  run_State(cb_start_vacation,0, S_Start_RockPlay);

        // Day States
        if (State == S_Start_Day)       run_State(cb_greeting,0, S_Start_Stage);
        if (State == S_Start_Stage)     run_State(cb_select_rock_stage, 0, S_Start_RockPlay);

        if (State == S_Start_RockPlay)
        {
            loop_event = loop_event - 1;
            if (loop_event != 0)          run_State(cb_abort_rock_play, 0, S_Start_RockPlay);
            else {loop_event = Nb_Events; run_State(cb_abort_rock_play, 0, S_Hotel);}
        }
        //if (State == S_Clear_Event)     Repeat_ThenGoto(PS4_SQUARE,Nb_Notifs, S_Hotel);

        // At the Hotel
        if (State == S_Hotel) {
            if (NumDay == 1)            State = S_Owner_Shop;
            else                        run_State(cb_hotel, 0, S_Throw_Gift);
        }

        if (State == S_Owner_Shop)      run_State(cb_owner_shop, 0, State_itemToBuy[Item_To_Buy]);

        if (State == S_Select_Swimsuit) select_Swimsuit_ThenGoto(S_Buy_Swimsuit);
        if (State == S_Buy_Swimsuit)    run_State(cb_buy_swimsuit, 0, S_Select_Paper);
        if (State == S_Select_Paper)    {
            if (WrappingPaper == All)   
                 Repeat_ThenGoto(PS4_RIGHT, loop_vacation % 10, 2, S_Wrap);
            else Repeat_ThenGoto(PS4_RIGHT, WrappingPaper, 2, S_Wrap);
        }
        if (State == S_Wrap)            run_State(cb_paper, 0, S_Throw_Gift);


        if (State == S_Ticket_Tab)      run_State(cb_select_ticket_tab, 0, S_Select_Ticket);
        if (State == S_Select_Ticket)   Repeat_ThenGoto(PS4_DOWN, Selected_Ticket, 4, S_Buy_Ticket);
        if (State == S_Buy_Ticket)      run_State(cb_buy_swimsuit, 0, S_Throw_Gift);

        if (State == S_Throw_Gift)      run_State(cb_throw_gift, 0, S_Go_Bed);
        if (State == S_Go_Bed)          run_State(cb_go_bed, 0, S_End_Day);

        if (State == S_End_Day)         State = EndDay();

        // End Vacation States
        if (State == S_End_Vacation)
        {
            loop_vacation = loop_vacation + 1;
            if (loop_vacation < Nb_Vacations)   run_State(cb_end_vacation, 0, S_Clear_Vacation);
            else  { loop_vacation = 1 ;         run_State(cb_end_vacation, 0, S_End_Game);}
        }

        if (State == S_Clear_Vacation)  Repeat_ThenGoto(PS4_CIRCLE,Nb_Notifs, 4, S_Return_Title);
        if (State == S_Return_Title)    run_State(cb_return_title, 0, S_Start_Game);
		
		// End of vacation loop
		if (State == S_End_Game) {
			Play = FALSE;
			State = S_IDLE;
			SwitchLED(BLUE);
		}
		
		
		//-----------------------------------------------------------------------------------
        // State called by each states with the function runState
        if (State == S_Play_Combo)
        { // combo playing
            // Execute the combo step-by-step
            if(!combo_running(cb_Send_Input)){
                set_val(TRACE_1,idx_step);

                if (dbyte(idx_step) != EOC)  combo_restart(cb_Send_Input);
                else State = Next_State;
            }
        }

    } // end of State automata
}

/*-----------------------*/
/*      Combos           */
/*-----------------------*/

combo cb_Send_Input{
    set_val(dbyte(idx_step),100);
    wait(100);

    set_val(dbyte(idx_step),0);
    wait(dbyte(idx_step + 1) * 50);

    idx_step = idx_step + 2;
}

combo cb_Repeat_Button{
    set_val(PressButton,100);
    wait(80);
    wait(wait_time);
    loop_button = loop_button + 1;
}

/*-----------------------*/
/*      Functions         */
/*------------------------*/

function SwitchLED(Color){
    if (Color==GREEN) {
        set_led(LED_1, 0);
        set_led(LED_2, 0);
        set_led(LED_3, 1);
    }
    else if (Color==BLUE){
        set_led(LED_1, 1);
        set_led(LED_2, 0);
        set_led(LED_3, 0);
    }
    else if (Color==RED_BLINK){
        set_led(LED_1, 0);
        set_led(LED_2, 1);
        set_led(LED_3, 0);
    }
    return;
}

// Returns the starting index of a combo

function get_combo_index(combo_id) {
    i = 0;
    while(TRUE) {//-----------------------
        v = dbyte(i);
        if(v == combo_id) {
            return(i + 1);
        } else {//====================
            while(v != EOC && v != EOD) {//#
                i = i + 1;
                v = dbyte(i);
            }//#
            if(v == EOD) break;
            else i = i + 1;
        }//=============================
    }//=============================
    return(-1);
}//-----------------------------------

function StartGame(){
    loop_event = Nb_Events - 1;  // only Afternoon & evening

    if (CharacterToPlay == All) {
        if (Selected_Char == MarieRose) Selected_Char = Selected_Char + 4;
        else                            Selected_Char = (Selected_Char + 2) % 20;
    }

    if (Ticket_Numero == All) Selected_Ticket = Selected_Ticket % 4 + 1;

    return (S_Start_Intro);
}

function EndDay() {
    NumDay = NumDay + 1;
    set_val(TRACE_4,NumDay);  // Trace 4 will display the # day
    if (NumDay > Nb_Days) {
        NumDay  = 1;
        return (S_End_Vacation);
    }
    else {
        set_val(TRACE_4,NumDay);
        return (S_Start_Day);
    }
}

function run_State(combo_to_run,offset,next) {
    set_val(TRACE_3,State);  // Look at the state definition to know where the automata is stuck
    idx_step    = get_combo_index(combo_to_run) + offset;
    State       = S_Play_Combo;
    Next_State  = next;
    return;
}

function select_Swimsuit_ThenGoto (next){
    if (Nb_Swimsuits != All)
        Repeat_ThenGoto(PS4_UP, Index_Swimsuit[(loop_vacation - 1) % Nb_Swimsuits + 1], 2, next);
    else {
        Repeat_ThenGoto(PS4_UP, next_swimsuit, 2, next);
        next_swimsuit = next_swimsuit + 1;
    }
    return;
}

function Repeat_ThenGoto(button, times, speed, next) {
    PressButton = button;
    wait_time   = speed * 50; // x * 50 ms of waiting

    if (loop_button <= times )
     if (!combo_running(cb_Repeat_Button)) combo_restart (cb_Repeat_Button);

    else
    {
        set_val(TRACE_5,loop_button);  // Look at the loop
        loop_button = 1;
        State = next;
    }
    return;
}

function DebugCombo(combo_to_run,offset){
    Play = TRUE;
    run_State (combo_to_run,offset,S_IDLE);
    return;
}
