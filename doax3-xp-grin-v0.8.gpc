/*
  ____   ___    _    __  _______
 |  _ \ / _ \  / \   \ \/ /___ /
 | | | | | | |/ _ \   \  /  |_ \
 | |_| | |_| / ___ \  /  \ ___) |
 |____/ \___/_/   \_\/_/\_\____/
   ____      _        __  ______
  / ___|_ __(_)_ __   \ \/ /  _ \
 | |  _| '__| | '_ \   \  /| |_) |
 | |_| | |  | | | | |  /  \|  __/
  \____|_|  |_|_| |_| /_/\_\_|                                        V0.8.1
___________________________________________________________________________

Licence : MIT
Author  : jinkou
Credits : Huge thanks to contributors: Zaykho; Morganite

Total byte size: 3446 bytes (84.18%)

  /*-------------------------*/
 /*  Quick start            */
/*--------------------------/----------------------------------------------

    1) Before starting the script, just change the character/swimsuit/Ticket
       in the config paragraph below (§Config)

    2) Start the script :
        a) with Triangle if you are at the beginning of the game.
           (Screen "Press a button")

        b) with R2 if you are at the beginning of the day.

    3) Stop the script with R1.
       If the script broke, manually move the game to the beginning of the next day
       and press R2 to restart it. (don't forget to clear zack's gift).

       Note: You may have to resynchronise the day number by pressing several L1
       (look at TRACE_4 which displays the day number)

       Press L2 to start the next RCQ.

    4) Normal Ending of script: Led is BLUE and the ending screen is
       Character's excitement screen (with maybe notifications).
       Otherwise : look at Troubleshooting.

    Script commands
    ---------------

      +----------+------------+------------------+---------------------------+
      | Button   | Script is   |      Action      |           Screen           |
      +----------+------------+------------------+---------------------------+
      | Triangle | Stopped    | Start the script  | "Press a button"           |
      | R1       | Running    | Stop the script   | Every where                |
      | R2       | Stopped    | Start a day       | Is at beginning of the day |
      | L1       | Whatever   | Day+1 in Trace_4  | Every where                |
      | L2       | Stopped    | Start RCQ         | is at RCQ stage            |
      | L3       | Stopped    | Delete Gift       | At hotel                   |
      | R3       | Stopped    | Debug a state     | Every where                |
      +----------+------------+------------------+---------------------------+

    Color Led:
    ----------
        - BLUE              : Script is Stopped
                              Only L1/L2/R2 are possible

        - GREEN             : Script is Playing
                              R1 to stop.

    Troubleshooting:
    ----------------
        Script doing wrong things:
        --------------------------
        - If you find your girl at the pool doing relax movie, it's because you
          didn't synchronise the day number. you are at day 1 in the script.
          Look below to increment the day number
          
        - If the script doesn't restart the vacation try adjusting the parameter SaveBUG
          in config section. 

        Logging and tracing:
        --------------------
        - TRACE_1 displays the index of the step inside §DataSet (PS4_CIRCLE, 20)
        - TRACE_3 displays the state where the script is.
                  Look at §State_Definition for the matching state

        - TRACE_4 displays the day number. If the script is stuck or if something
                  goes wrong, stop the script, manually move the game to the next day
                  then adjust the day number inside TRACE_4 by pressing L1.

        - Press R3 to test a whole State or a combo
            - if you want to test a whole state, write this where needed
                if (State == S_Debug) run_State(COMBO_TORUN, 0, NEXT_STATE_TOGO);

            - if you want to test just a combo just do this
                if (State == S_Debug) run_State(COMBO_TOTEST, 0, S_IDLE);


            +---------+-----------------------+
            | TRACE   |       Used For         |
            +---------+-----------------------+
            | TRACE_1 | combo step             |
            | TRACE_2 | Vacation number        |
            | TRACE_3 | State                  |
            | TRACE_4 | Num Day                |
            | TRACE_5 | Event Nb/purchase_nb   |
            | TRACE_6 | Free for debug         |
            +---------+-----------------------+


          /*-----------------------*/
         /*     Variable used     */
        /*------------------------/

        +---------+-----------------+----------------------+---------------------+
        | EEPROM  |    Used For      |      Saved at        |    Every X times     |
        +---------+-----------------+----------------------+---------------------+
        | PVAR_15 | Checksum config  | ConfigHasChanged()   | 1 at Cronus Reboot   |
        | SPVAR_2 | purchase_nb      | exit_Shop_ThenGoto() | 1 at vacation = X    |
        +---------+-----------------+----------------------+---------------------+

        Cronus Lifespan:
        ----------------
        X = Buy_At_X; often set to 3.
        3 EEPROM write every 10 vacations.
        Each vacations = 30 min => 3 EEPROM write per 5 hours.
        Cronus is guaranteed for 100 000 Writes.

        => 20 years running continuously this script before Cronus dies.


/*----------------------------------------------------------------------------*/

  /*-----------------------*/
 /*      Backlog          */
/*------------------------/-------------------------------------------------
V.0.8.1 - various bug fix and time adjustment to play with "EndSaveBug". 
            - Script is less aggressive in timer in "now loading" screens. 
            - Delete gifts: add an array that count each character vacation, so
                            that the script only activate deletion on specific 
                            character.
v.0.8   New features :
        (used only 170 bytes more from v0.7.1, still 16% left in memory (554 bytes)) 
        - Playing with a partner is possible. Fully tested at hotel with gift 
          that expires.

        - You don't need to clear girls' gift anymore. Script will delete gifts at 
           every X vacation. X is defined in config section. You can switch off 
           deletion too. 

        - It has a mini script inside that will help you clear your girls' gift. 
          In the config section, write how much you want to delete and press L3 
          to delete them (you must be at the hotel, girls blue menu).

        - If EndSaveBug is selected in config, Trace_1 will pulse the waiting seconds.

V0.7.1  Adjust the day while the script is playing. Switch buying On/Off.
V0.7    New Features: No more double items bought when switching your Cronus On.
V0.6    New Feature: Characters to level up are selectable
v 0.5.1 Huge boost in time thanks to Zaykho:
v 0.5   New Feature: Buy any item in the owner shop.
v0.4.2  Time adjustment at beginning, and at clearing notifications.
v0.4.1  You can choose a different wrapping paper for each vacations.
v0.4    New Feature: Paper Wrapping: you can select paper wrapping color.
v0.3.1  fine tuning time inside menu, 5xFaster
v0.3    You can buy swimsuits/ticket
v0.1    First version

---------------------------------------------------------------------------*/

  /*-----------------------*/
 /*      Characters       */
/*-----------------------*/
define Kasumi                      = 0;
define Momiji                      = 2;
define Hitomi                      = 4;
define Helena                      = 6;
define MarieRose                   = 8;
define Ayane                       = 12;
define Kokoro                      = 14;
define NyoTengu                    = 16;
define Honoka                      = 18;

// Paper wrapping
define paper_Silver                = 0;
define paper_Kasumi                = 1;
define paper_Honoka                = 2;
define paper_MarieRose             = 3;
define paper_Ayane                 = 4;
define paper_NyoTengu              = 5;
define paper_Kokoro                = 6;
define paper_Hitomi                = 7;
define paper_Momiji                = 8;
define paper_Helena                = 9;
define paper_Premium               = 10;

  /*-------------------------*/
 /*      List of Items      */
/*-------------------------*/
// tab 0
define MummyA                     =  2;
define MummyI                     = -6;
define PeaceD                     =  8;
define PeaceH                     =  6;
define AsariA                     = -7;
define AsariI                     = -15;
define EelE                       = 18;
define DecupleI                   = 21;
define SweetyA                    = -16;
define SweetyI                    = -24;

// tab 1
define Sidecar                    =  2;

//tab2
define Ticket1                    = -1;
define Ticket2                    =  0;
define Ticket3                    =  1;
define Ticket4                    =  2;
define MoebieusSlow               =  3;
define HardGelEx                  = -6;


define All                        = 255;


  /*------------------------------------*/
 /*  Configuration      (§Config)      */
/*-------------------------------------/-----------------------------*/

// --------------------------
// number of Vacation to loop
// --------------------------

define Nb_Vacations               = 25;


// will buy at the 1rst vacation then at every X vacations
define IWantToBuyItem           = TRUE;// False = switch off autobuying.
define Buy_At_X                 = 2;  // At 2 vacations


// ----------------------
// Characters to Level up
// ----------------------

// Select one or several Characters to level up,
// comment / uncomment the characters you want


int CharacterToPlay  // Don't touch this one

//int Character0                  = Kasumi;
//int Character1                  = Momiji;
//int Character2                    = Hitomi;
int Character3                  = Helena;
//int Character4                    = MarieRose;
int Character5                    = Honoka;
int Character6                    = NyoTengu;
//int Character7                  = Kokoro;
int Character8                  = Ayane;

int EndOfChars = 255  // Don't touch this one



int Items;// dont' touch this one.

// -------------------------
// Items you want to collect
// -------------------------

// It's a range like
//  [MummyA, ...., MummyH] for Helena
//  [Ticket1 ...Ticket3] for All
//  [Pose ticket] for honoka
//  Possible values are pre-define Values (see above: list of item)
//                      or negative/positive numbers (see example below)

// comment/uncomment / modify / add what you want

// Some Examples
// take all Asari in silver
//int Tab0 = 0, FromRow0 = AsariaA,    ToRow0 = AsariI,   Paper0 = paper_Silver;
 // only one for Helena
//int Tab1 = 0, FromRow1 = MummyA,    ToRow1 = MummyI,   Paper1 = paper_Helena;
// a range of tickets
//int Tab3 = 2, FromRow3 = Dangerous, ToRow3 = Tempting, Paper3 = paper_Honoka;
 // anything at tab 1 from 7 to 18 to all,for instance godfather...
//int Tab4 = 1, FromRow4 = 7,         ToRow4 = 18,       Paper4 = All;
//other items like pose tickets
//int Tab5 = 2, FromRow5 = -3,        ToRow5 = 3,        Paper_5 = paper_Hitomi;
//int Tab5 = 2, FromRow5 = -3,        ToRow5 = 3,        Paper_5 = All;

// perso
//int Tab0 = 0, FromRow0 = -13,    ToRow0 = AsariI,   Paper0 = paper_Silver;
int Tab0 = 0, FromRow0 = SweetyA, ToRow0 = SweetyI, Paper0 = paper_Momiji;

//int Tab2 = 2, FromRow2 = Ticket1, ToRow2 = Ticket4,  Paper2 = paper_Silver;

int EndofItems = 255;// dont' touch this one.

// ------------------



// --------
// S+ Movie
// --------
// Set to TRUE if you suspect that your character will end in S+ movie.

define optionalSMovie       = TRUE;


// -------
// Partner
// -------
// Set to TRUE if you want your girl to play with a partner. 

define takePartner          = TRUE;

// -------------------------
// Gift Inventory management
// -------------------------
// Set to TRUE if you want to clear girl's gifts inventory
define IWantToDeleteGift    = TRUE;
define DeleteAt             = 2;  // every X vacations will delete at day 14
define NbToDelete           = 10; // Number of gifts to delete (Note: choose less than 10
                                  // per vacation bc of the expired gifts)

// ---------------
// Troubleshooting
// ---------------
// set it to TRUE if you meet the deadly save bug at vacation ending
// Until TN or Sony correct this random bug, this is a not-always working solution

define SAVE_BUG_IS_PRESENT  = TRUE;
define Nb_sec               = 60; // how many sec to wait, Trace_1 will pulse the second

/*-------------  End of configuration ---------------------------------------------*/





  /*-----------------------*/
 /*      Definition       */
/*-----------------------*/

define Nb_Days                      = 14;
define Nb_Notifs                    = 10;
define Night                        = 0;
define Morning                      = 1;
define Afternoon                    = 2;
define Evening                      = 3;


  /*---------------------------------------*/
 /* States          (§State_Definition)   */
/*---------------------------------------*/

define S_Play_Combo                 = 1;

define S_Start_Game                 = 10;
define S_Start_Intro                = 11;
define S_Select_Char                = 12;
define S_Start_Vacation             = 13;
define S_Partner                    = 14;

define S_Start_Day                  = 20;
define S_End_Day                    = 21;

define S_Start_Stage                = 30;
define S_Start_RockPlay             = 31;
define S_Exit_Mission               = 32;

define S_Clear_Hotel                = 40
define S_Hotel                      = 41;
define S_Throw_Gift                 = 42;
define S_Delete_Gift                = 43;
define S_Go_Bed                     = 44;

define S_Owner_Shop                 = 50;
define S_Select_Item                = 51;
define S_Buy_Item                   = 52;
define S_Select_Tab                 = 53;
define S_Select_Paper               = 54;
define S_Wrap                       = 55;
define S_Exit_Shop                  = 56;

define S_End_Vacation               = 60;
define S_Clear_Vacation             = 61;
define S_S_Movie                    = 62;
define S_Clear_Movie                = 63;
define S_Clear_Movie2               = 64;


define S_Return_Title               = 70;
define S_End_Game                   = 71;

define S_Debug                      = 90;
define S_SAVEBUG                    = 91;
define S_Repeat_Button              = 92;

define S_IDLE                       = 100;

// indices used for the data structure
// -----------------------------------

define cb_intro                    = 1;
define cb_left_char                = 5;
define cb_right_char               = 10;
define cb_start_vacation           = 15;
define cb_partner                  = 16;
define cb_quit_mission             = 21;
define cb_select_rock_stage        = 25;
define cb_abort_rock_play          = 30;
define cb_hotel                    = 35;
define cb_girl_closet              = 40;
define cb_throw_gift               = 41;
define cb_owner_shop               = 42;
define cb_buy_item                 = 44;
define cb_paper                    = 45;
define cb_go_bed                   = 47;

define cb_end_vacation             = 50;
define cb_skip_movies              = cb_end_vacation;
define cb_return_title             = 55;

// End Flags. 254 and 255 should never be used in the
// data segment for other purposes.
//-----------------------------------------------------
define EOC                          = 254; // End of combo
define EOD                          = 255; // End of Data Segment
//-----------------------------------------------------


// LED Colors
// ----------------

define GREEN                        = 1;
define BLUE                         = 2;

//-----------------------------------------------------

  /*------------------------*/
 /*      Variables         */
/*------------------------*/

// State variables
// ---------------
int State                           = S_IDLE;
int Next_State;

//
// Items Swimsuit and characters
//------------------------------
int index_char;
int Selected_Char;

int index_item                      = 1;
int Item_Tab;
int CurrentItem;
int ItemToRow;
int ItemPaper;
int stepRow;

int purchase_nb;        // nb time we enter in owner shop
int NbItem;
int NbPrevious;
int indexCurrent;

// Days and loop vacation
//-----------------------
int NumDay                          = 1;
int loop_event                      = Night; // Morning , Afternoon, Evening
int loop_vacation                   = 1;
int loop_notif                      = 1;
int loop_button;
int wait_time;                              // time used between repeating button
int Times;

// combo
// -----
int idx_step;      // to circulate thru the data structure
int i,v;
int PressButton;

// config save
// ------------
int savedCheckSum;

// Deleting Gift
//---------------
int loop_delete;                           // delete gift counter
   // array that stores each character vacation counter
int Nb_Vacation_Character;
int Vacation_Character_1;
int Vacation_Character_2;
int Vacation_Character_3;
int Vacation_Character_4;
int Vacation_Character_5;
int Vacation_Character_6;
int Vacation_Character_7;
int Vacation_Character_8;
int Vacation_Character_9;



//-----------------------------------------------------

  /*--------------------------------------*/
 /*      Data Structure    (§DataSet)    */
/*--------------------------------------*/

// EOC represents the end of an event
// 255, or 254 a value reserved, don't use them

//  Idx, Button,       Wait(x50ms),     Event
//---------------------------------------------------------------
//      Introduction
data(
    cb_intro,
        PS4_CIRCLE,      50,         //  Travel to zack island
        PS4_CIRCLE,      100,        //
        PS4_OPTIONS,     10,         //  skip intro video
        PS4_OPTIONS,     150,        //
    EOC,

//      ...
//      Select Character
//            Left Side of Marie Rose
    cb_left_char,
        PS4_LEFT,        1,         //  Kasumi
        PS4_LEFT,        1,         //  Momiji
        PS4_LEFT,        1,         //  Hitomi
        PS4_LEFT,        1,         //  Helena
        PS4_CIRCLE,      150,       //  Confirm choice
    EOC,

//            Right Side of Marie Rose
    cb_right_char,
        PS4_RIGHT,       1,         //  Ayane
        PS4_RIGHT,       1,         //  Kokoro
        PS4_RIGHT,       1,         //  NyoTengu
        PS4_RIGHT,       1,         //  Honoka
        PS4_CIRCLE,      150,       //  Confirm choice
    EOC,

//      Start Vacation
    cb_start_vacation,
        PS4_OPTIONS,     20,         //  skip character intro
        PS4_OPTIONS,     240,        //  skip character intro
        PS4_OPTIONS,     50,         //  wait longer
    EOC,

//      Partner
    cb_partner,
        PS4_LEFT,        5,         //  don't take a partner
        PS4_CIRCLE,      240,       //  offset = 2 for taking a partner
    EOC,

//      RCQ
    cb_quit_mission,
        PS4_LEFT,       1,         //  from Rock stage
        PS4_LEFT,       1,         //  offset from day 1
        PS4_LEFT,       1,         //
        PS4_CIRCLE,     80,        //  Select Pool
        PS4_TOUCH,      10,        //  Owner mode
        PS4_UP,         2,         //  Select mission
        PS4_UP,         2,
        PS4_CIRCLE,     50,         // Kill ?
        PS4_RIGHT,      10,         // Yes
        PS4_CIRCLE,     50,
        PS4_TOUCH,      2,          // exit Owner mode
        PS4_CROSS,      50,         // exit menu
        PS4_LEFT,        1,         //  Go to Rock Stage
        PS4_LEFT,        1,         //
        PS4_LEFT,        1,         //
    EOC,

//       One Day event
    cb_select_rock_stage,
        PS4_CIRCLE,      80,         // good morning !
        PS4_LEFT,        1,         //  Go to Rock Stage
        PS4_LEFT,        1,         //
        PS4_LEFT,        1,         //
    EOC,

    cb_abort_rock_play,
        PS4_CIRCLE,      15,        //  Select Rock Stage
        PS4_DOWN,        1,         //
        PS4_CIRCLE,      100,        //  Select Rock Game

        PS4_OPTIONS,     5,         //  Abort Play
        PS4_UP,          1,         //
        PS4_CIRCLE,      1,         //
        PS4_LEFT,        1,         //
        PS4_CIRCLE,      150,       //  Play Aborted
    EOC,

    cb_hotel,
        PS4_CIRCLE,      200,         // End Of Day
        PS4_SQUARE,      80,        // clear optional notification
        PS4_SQUARE,      80,        // expired gift
        PS4_SQUARE,      80,        // partner gift
        PS4_SQUARE,      80,      // Zack gift
 //   EOC,

 //   cb_hotel,
        PS4_SQUARE,      50,      // Zack gift
        PS4_CROSS,       100,        // exit inventory
    EOC,

    cb_girl_closet,
        PS4_SQUARE,      70,         // Open girl's closet
        PS4_LEFT,        5,         //
        PS4_LEFT,        2,         //
        PS4_LEFT,        2,         //
    EOC,
    cb_throw_gift,
        PS4_CIRCLE,      10,         // select gift
        PS4_LEFT,        2,         //
        PS4_CIRCLE,      5,         //
        PS4_LEFT,        2,         //
        PS4_CIRCLE,      5,         // throw gift away
        PS4_SQUARE,      2,         // Re-select first gift 
    EOC,

    // Buy swimsuit / Ticket
    cb_owner_shop,
        PS4_TRIANGLE,    70,         // Enter Owner shop
    EOC,
    cb_buy_item,
        PS4_CIRCLE,      10,         // buy
    EOC,
    cb_paper,
        PS4_CIRCLE,      10,        // Paper select
        PS4_CIRCLE,      10,        //
        PS4_CIRCLE,      10,        // yes / no ?
        PS4_SQUARE,      10,        // easy clear notif
        PS4_SQUARE,      10,        // not enough ? or ok
        PS4_CROSS,       10,            // cancel
        PS4_CROSS,       15,        // exit
        PS4_CROSS,       50,        // exit
        PS4_TOUCH,       50,        // exit Owner mode
    EOC,

    // Bed Time
    cb_go_bed,
        PS4_DOWN,        1,         // Start go to bed
        PS4_DOWN,        1,         // view closet or offset for day 14
        PS4_DOWN,        1,         // go to bed
        PS4_CIRCLE,      250,       // waiting for end of girl's speach
        PS4_CROSS,       100,       // wait longer random longer speach
        PS4_CIRCLE,      250,       // go to new morning

    EOC,

//       skip end movie is the same as End Vacation
//       End Vacation
    cb_end_vacation,
        PS4_CIRCLE,      30,         // sigh i have to go !
        PS4_OPTIONS,     20,         // skip End movie
        PS4_OPTIONS,     100,        //
    EOC,

    cb_return_title,
        PS4_SQUARE,      20,        // view excitement level
        PS4_CIRCLE,      250,         // return to title
    EOC,

// End of Data
    EOD
);                           // end of DataSet


//-----------------------------------------------------

  /*----------------------------*/
 /*      Main and Init         */
/*----------------------------*/

init {
    SwitchLED(BLUE);

    // get what was already bought to avoid buying them again
    if (ConfigHasChanged()) {
        // There is a change in config => reload values from script

        Item_Tab    = Items[1];
        CurrentItem = Items[2];
        ItemToRow   = Items[3];
        if  (Items[4]== All)  ItemPaper = 1;
        else                  ItemPaper = Items[4];
        index_char  = 0; // StartGame() will ++ it
    }
    else {
    // Config seems to be the same => reload  from EEPROM
        index_item      = get_IndexItem();
        Item_Tab        = Items[index_item];
        ItemToRow       = Items[index_item + 2];
        set_CurrentItem_AndPaper();
        index_char  = 0; // StartGame() will ++ it
        set_val(TRACE_5,purchase_nb);
    }
}

main {

    // Set script commands
   //---------------------
    // Press R1 to Stop the script
    if(event_press(PS4_R1)) {
        State       = S_IDLE;
        if (combo_running(cb_Send_Input))   combo_stop (cb_Send_Input);
        if (combo_running(cb_Repeat_Button))combo_stop (cb_Repeat_Button);
        SwitchLED(BLUE);
    }
    // L1 to adjust the numday (look at TRACE_4)
    if (event_press(PS4_L1))  {
         NumDay = NumDay  % 14 + 1 ;// adjust the numDay if script is stopped
         set_val(TRACE_4,NumDay);  // Trace 4 will display the # day
    }

    // If the script is stopped,
    if (State == S_IDLE) {
        set_val(TRACE_3,State);  // Look at the state definition to know where the automata is stuck

            //Press Triangle to pause/play the script.
        if(event_press(PS4_TRIANGLE)) {
            SwitchLED(GREEN);
            State = S_Start_Game;  //Start.
        }

        // pressing R2
        // will restart it at the beginning of the day
        if (event_press(PS4_R2)) {
            loop_event = Night; // correction from Morganite
            State      = S_Start_Day;
            SwitchLED(GREEN);
        }

        // L2 to start at the next RCQ
        if (event_press(PS4_L2)) {
            set_val(TRACE_5,loop_event);
            SwitchLED(GREEN);
            State = S_Start_RockPlay;
        }

        // R3 to test a whole State
        if (event_press(PS4_R3))  State = S_Debug; // test a whole state

        // L3 to Delete gift inventory
        if (event_press(PS4_L3))  run_State(cb_girl_closet, 0, S_Delete_Gift);

        /*    if (event_press(PS4_UP))  {
              loop_vacation = loop_vacation  % Nb_Vacations + 1 ;
              set_val(TRACE_2,loop_vacation);
              }
         */
    }

    // Main Loop of the State automata
    // -------------------------------
    else {

        // intro States

        if (State == S_Start_Game)      State = StartGame();
        if (State == S_Start_Intro)     run_State(cb_intro, 0, S_Select_Char);
        
        if (State == S_Select_Char)     run_State(cb_left_char, Selected_Char, S_Start_Vacation);

        if (State == S_Start_Vacation)  run_State(cb_start_vacation, 0, S_Partner);
        if (State == S_Partner)         run_State(cb_partner, 2 * takePartner, //little trick
                                                  S_Exit_Mission);           // to save memory

        // Day States
        if (State == S_Exit_Mission) {
            if (NumDay == 1 && loop_event == Afternoon) 
                                        run_State(cb_quit_mission,2,S_Start_RockPlay);
            else                        run_State(cb_quit_mission,0,S_Start_RockPlay);
        }
        if (State == S_Start_Day)       run_State(cb_select_rock_stage, 0, S_Start_RockPlay);
        if (State == S_Start_RockPlay)  run_State(cb_abort_rock_play, 0, RCQ());
        //if (State == S_Debug)         State = S_Hotel;
        // At the Hotel
        if (State == S_Hotel) {
            if (IWantToBuyItem && NumDay == 1 && (!(loop_vacation % Buy_At_X)||(loop_vacation == 1)))         
                                        run_State(cb_hotel, 0, S_Owner_Shop);
                                        
            else                        run_State(cb_hotel, 0, S_Throw_Gift);
        }

        // Shopping Items at X vacations
        if (State == S_Owner_Shop)      run_State(cb_owner_shop, 0, S_Select_Tab);

        if (State == S_Debug)           run_State(cb_owner_shop, 0, S_Select_Tab); //uncomment this to test items to buy
        // ============== Start loop Debug ===============================
        if (State == S_Select_Tab)      Repeat_ThenGoto(PS4_RIGHT, Item_Tab, 2, S_Select_Item);
        if (State == S_Select_Item)     select_Item_ThenGoto(S_Buy_Item);
        if (State == S_Buy_Item)        run_State(cb_buy_item, 0, S_Select_Paper);
        if (State == S_Select_Paper)    Repeat_ThenGoto(PS4_RIGHT, ItemPaper, 2, S_Wrap);
        if (State == S_Wrap)            run_State(cb_paper, 0, S_Exit_Shop);
        // ============== END loop Debug ===============================
        if (State == S_Exit_Shop)       exit_Shop_ThenGoto(S_Debug);  // uncomment this to test items to buy

        //if (State == S_Exit_Shop)       exit_Shop_ThenGoto(S_Throw_Gift); //comment this to test items to buy


        // Delete gift ?
        // if (State == S_Debug)         State = S_Throw_Gift;
        if (State == S_Throw_Gift) {
            if (IWantToDeleteGift  && NumDay == 14  
                &&  !(Nb_Vacation_Character[index_char] % DeleteAt)) // Nb vacation == DeleteAt
                                        run_State(cb_girl_closet,0, S_Delete_Gift);
            else                        State = S_Go_Bed;
        }

       // if (State == S_Debug)           run_State(cb_girl_closet, 0, S_Delete_Gift); //uncomment this to test deletion
        if (State == S_Delete_Gift) {
                                        loop_delete = (loop_delete + 1)  %  (NbToDelete + 1);
            if (loop_delete)            run_State(cb_throw_gift,0,S_Delete_Gift);
            else                        Repeat_ThenGoto(PS4_CROSS,1,50, S_Go_Bed);
            set_val(TRACE_6,loop_delete);
        }

        // End of hotel
        if (State == S_Go_Bed)  {        
            if (NumDay != 14)           run_State(cb_go_bed, 0, S_End_Day);
            else                        run_State(cb_go_bed, 2, S_End_Day);
        }
            
        if (State == S_End_Day)         State = EndDay();

        // End Vacation States
       // if (State == S_Debug)           State = S_Clear_Movie; //uncomment this to test the end

        if (State == S_Clear_Movie)     Repeat_ThenGoto(PS4_CIRCLE,Nb_Notifs, 10, S_S_Movie);
        if (State == S_S_Movie)         run_State(cb_skip_movies, 0, S_Clear_Movie2);
        if (State == S_Clear_Movie2)    Repeat_ThenGoto(PS4_CIRCLE,Nb_Notifs, 10, S_End_Vacation);

        if (State == S_End_Vacation) {
                                        loop_vacation = loop_vacation + 1;  
                                        set_val(TRACE_2,loop_vacation);
            if (loop_vacation < Nb_Vacations)   
                                        run_State(cb_end_vacation, 0, S_Clear_Vacation);
            else                        run_State(cb_end_vacation, 0, S_End_Game);
        }

        if (State == S_Clear_Vacation)  Repeat_ThenGoto(PS4_CIRCLE,Nb_Notifs, 15, S_Return_Title);

        if (State == S_Return_Title)    run_State(cb_return_title, 0, S_SAVEBUG);

        //if (State == S_Return_Title)    Repeat_ThenGoto(PS4_CIRCLE,1,250, S_SAVEBUG);
        if (State == S_SAVEBUG)  {
                                        // Adjust number and waiting time (Nb_sec x 20 x 50ms)
            if (SAVE_BUG_IS_PRESENT)    Repeat_ThenGoto(TRACE_1,Nb_sec, 20, S_Start_Game);
            else                        State = S_Start_Game;
        }

        // End of vacation loop
        if (State == S_End_Game) {
                                        loop_vacation = 1;
                                        NumDay        = 1;
                                        State         = S_IDLE;
                                        SwitchLED(BLUE);
        }


        //-----------------------------------------------------------------------------------
        // State called by each states with the function runState
        if (State == S_Play_Combo)
        { // combo playing
            // Execute the combo step-by-step
            if(!combo_running(cb_Send_Input)){
                set_val(TRACE_1,idx_step);
                if (dbyte(idx_step) != EOC)  combo_restart(cb_Send_Input);
                else State = Next_State;
            }
        }

        // State when repeating buttons
        if (State == S_Repeat_Button) {  
           if (!combo_running(cb_Repeat_Button)) { 
                if (loop_button<Times)  combo_restart (cb_Repeat_Button);
                else                    {loop_button=0;State = Next_State;}
            }
        }
    } // end of State automata
}

/*-----------------------*/
/*      Combos           */
/*-----------------------*/

combo cb_Send_Input{
    set_val(dbyte(idx_step),100);
    wait(100);

    set_val(dbyte(idx_step),0);
    wait(dbyte(idx_step + 1) * 50);

    idx_step = idx_step + 2;
}

combo cb_Repeat_Button{
    set_val(PressButton,100);
    wait(80);
    set_val(PressButton,0);
    wait(wait_time);
    loop_button = loop_button + 1;
}

  /*------------------------*/
 /*      Functions         */
/*------------------------*/

function SwitchLED(Color){
    if (Color==GREEN) {
        set_led(LED_1, 0);
        set_led(LED_2, 0);
        set_led(LED_3, 1);
    }
    else if (Color==BLUE){
        set_led(LED_1, 1);
        set_led(LED_2, 0);
        set_led(LED_3, 0);
    }
    return;
}

// Returns the starting index of a combo

function get_combo_index(combo_id) {
    i = 0;
    while(TRUE) {//-----------------------
        v = dbyte(i);
        if(v == combo_id) {
            return(i + 1);
        } else {//====================
            while(v != EOC && v != EOD) {//#
                i = i + 1;
                v = dbyte(i);
            }//#
            if(v == EOD) break;
            else i = i + 1;
        }//=============================
    }//=============================
    return(-1);
}//-----------------------------------

function StartGame(){
    NumDay = 1;
    set_val(TRACE_4,NumDay);  // Trace 4 will display the # day
    loop_event = Afternoon;  // only Afternoon & evening
    index_char = index_char + 1;
    if (CharacterToPlay[index_char] == EndOfChars) index_char = 1;
    Selected_Char = CharacterToPlay[index_char];
    // inc nb of vacation of next character => used for gift deletion
    Nb_Vacation_Character[index_char] = Nb_Vacation_Character[index_char] + 1; 
    return (S_Start_Intro);
}

function EndDay() {
    NumDay = NumDay + 1;
    if (NumDay > Nb_Days) {
        if (optionalSMovie == TRUE) Next_State = S_Clear_Movie;
        else                        Next_State = S_End_Vacation;
    }
    else                            Next_State = S_Start_Day;

    set_val(TRACE_4,NumDay);  // Trace 4 will display the # day
    return Next_State;
}

function RCQ(){
    loop_event = (loop_event + 1) % 4;
    if (NumDay == 1){
        if (loop_event == Evening)    Next_State = S_Exit_Mission;
        else                          Next_State = S_Hotel;
       //         else                          Next_State = S_Clear_Hotel;
    }
    else {
        if (loop_event == Morning)  Next_State = S_Start_RockPlay;
        if (loop_event == Afternoon){
            if (NumDay != 14)       Next_State = S_Exit_Mission;
            else                    Next_State = S_Start_RockPlay;
        }
        if (loop_event == Evening)  {
                                    loop_event = Night; 
                                    Next_State = S_Hotel;
                            //                                            Next_State = S_Clear_Hotel;
        }
    }
    return Next_State;
}

function run_State(combo_to_run,offset,next) {
    set_val(TRACE_3,State);  // Look at the state definition to know where the automata is stuck
    idx_step    = get_combo_index(combo_to_run) + offset;
    State       = S_Play_Combo;
    Next_State  = next;
    return;
}

function select_Item_ThenGoto (next){
    if (CurrentItem >= 0)PressButton = PS4_UP;
    else                 PressButton = PS4_DOWN;
    Repeat_ThenGoto(PressButton, abs(CurrentItem), 2, next);
    return;
}

function exit_Shop_ThenGoto(next){
    if (Items[index_item + 3] == All) {
        ItemPaper   = ItemPaper + 1;
        if (ItemPaper == 10){
            ItemPaper =  1;
            next_Item();
        }
        // else  ItemPaper   = ItemPaper + 1;
    }
    else next_Item();
    State = next;
    purchase_nb = purchase_nb + 1;

    // save values for next cronus init
    set_val(TRACE_5,purchase_nb);
    set_pvar(SPVAR_2,purchase_nb);

    return;
}

function next_Item(){
    if (abs(CurrentItem - ItemToRow) != 0)  {
        if (CurrentItem <= ItemToRow) stepRow =  1; // next item is above
        else                          stepRow = -1; //              below
        CurrentItem = CurrentItem + stepRow;
    }
    else { // no more item in this line => go to next config line
        index_item  = index_item + 4;
        if (Items[index_item] == EndofItems)   index_item = 1;

        Item_Tab    = Items[index_item];
        CurrentItem = Items[index_item + 1];
        ItemToRow   = Items[index_item + 2];

        if  (Items[index_item + 3] == All)  ItemPaper = 1;
        else                                ItemPaper = Items[index_item + 3];
    }
    return;
}


function Repeat_ThenGoto(button, times, speed, next) {
    State       = S_Repeat_Button;
    PressButton = button;
    Times       = times;
    wait_time   = speed * 50; // x * 50 ms of waiting

    Next_State  = next;
    return;
}  

function ConfigHasChanged(){
    // try to detect if Items have changed in config  section
    // It's a BAD check sum code but it's not greedy on memory .
    i = 1;
    v = Items[i];
    while (Items[i] != EndofItems) {
        v = v + i + 2*Items[i] + 3*Items[i + 1]
            + 4*Items[i + 2] + 5*Items[i + 3]; // sum every value
        i = i + 4;
    }

    savedCheckSum = get_pvar(PVAR_15, -32768, 32767,0);
    set_pvar(PVAR_15,v); // save it for next  Cronus reboot
    return (v != savedCheckSum); // compare it with the EEPROM saved before
    // == True if different
}

function get_IndexItem() {
    i = 1;
    purchase_nb = get_pvar(SPVAR_2,0,20,0);

    //  Paper    != All               ToRowX   - FromRowX
    if (Items[4] != All) NbItem = abs(Items[3] - Items[2]) + 1;
    //each item are wrapped into 9 colors
    else NbItem = 9 * abs((Items[3] - Items[2]) + 1);

    while (purchase_nb > NbItem) {
        i = i + 4;
        if (Items[i] == EndofItems) i = 1;
        NbPrevious = NbItem;

        if (Items[i + 3] != All) NbItem = NbPrevious + abs(Items[i + 2] - Items[i + 1]) + 1;
        else NbItem = NbPrevious + abs((Items[i + 2] - Items[i + 1]) + 1) * 9;
    }
    return i;
}

function set_CurrentItem_AndPaper() {
    CurrentItem  = Items[index_item + 1]; // set CurrentItem at FromRowX
    ItemPaper    = Items[index_item + 3];

    // find index of currentItem in range [FromRowX , ToRowX]
    indexCurrent = abs(purchase_nb - NbPrevious); // absolute value for safety

    if (ItemPaper == All) {
        ItemPaper    = indexCurrent % 9;
        indexCurrent = indexCurrent / 9;
    }

    if (indexCurrent != 0) {
        if (abs(CurrentItem - ItemToRow) != 0)  {
            if (CurrentItem <= ItemToRow) stepRow =  1; // next item is above
            else                          stepRow = -1; //              below

            i=1;
            while (i < indexCurrent) {
                CurrentItem = CurrentItem + stepRow;
                i = i + 1;
            }
        }
        else  CurrentItem = Items[index_item + 1];
    }
    else CurrentItem = Items[index_item + 1];
    return;
}
